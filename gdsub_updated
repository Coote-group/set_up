#! /usr/bin/perl 

if (@ARGV < 1) { die "Syntax: rjsub filename [optional flags]
Optional Flags (order doesn't matter):
  -rproj [f81/x69]  choose project to run on 
  -time [xh]        max runtime in hours
  -mem [xmb]        max virtual memory in mb or gb
  -jobfs [xgb]      max disk space in mb or gb
  -nproc [x]        number of processors
  -e                submit to express queue 
  -ver              program version eg. use 09c01 to use Gaussian 09, Revision C.01 (often resolves Internal Consistency Failure problem for MP2/GTMP2Large and can also help avoid geometry optimisations getting stuck in unproductive cycles)
  -ichk             copy initial gaussian checkpoint file to raijin - filename must match .com file - not recommended as files become corrupted more often than not. 
  -ochk             copy gaussian checkpoint file back from raijin after calculation - not recommended as files become corrupted more often than not. \n\n" }

$|++;


$machine = "gadi";
$GD = "GDN";
chomp($ARGV[0]);
$scanjob=0;

$proj[0]=$ENV{PROJECT};
$proj[1]=$ENV{PROJECT2};
$home=$ENV{HOME};
if (!($ENV{PROJ1GRANT})) {
    die "Please edit your .bashrc to include the following lines and source: \nexport PROJECT=f81\nexport PROJECT2=x69\nexport PROJ1GRANT=400\nexport PROJ2GRANT=750\n"; 
}
else {
    $grant{$proj[0]} = $ENV{PROJ1GRANT};
    $grant{$proj[1]} = $ENV{PROJ2GRANT};
}
$ruser = $ENV{REMOTE_USER};
$rproj = $proj[0];
$definerproj = "n";
$utime = "";
$umem = "";
$upmem = "";
$pmem = "";
$ujobfs = "";
$unproc = "";
$ichk = "";
$ochk = "";
$cs = "";

$maxQ{x69} = 10000; # Max is 400 but can be slow to update 
$maxQ{f81} = 10000; # Max is 400 but can be slow to update
$maxU{x69} = 10000; # Limited to 350 to allow space for other group members
$maxU{f81} = 10000; # Please do not increase unless you're sure you won't inconvenience others
$sleep_queue = 10000;
$sqtest = "no";


for ($i = 0; $i <= 30; $i++) {
    if ($ARGV[$i]){
        if ($ARGV[$i] =~ /^-rproj/){
            $rproj = $ARGV[$i+1];   
            $definerproj = "y";
        }
        if ($ARGV[$i] =~ /^-ver/){
            $ver = "-ver $ARGV[$i+1]";   
        }
        if ($ARGV[$i] =~ /^-uq/){
            $m = $ARGV[$i+1];        
            $sqtest = "yes";
        }
        if ($ARGV[$i] =~ /^-tq/){
            $n = $ARGV[$i+1];         
            $sqtest = "yes";
        }
        if (($ARGV[$i] =~ /^-lt/) || ($ARGV[$i] =~ /^-time/)) {
            $utime = $ARGV[$i+1];       
        }
        if (($ARGV[$i] =~ /^-lw/) || ($ARGV[$i] =~ /^-mem/)) {
            $umem = $ARGV[$i+1];       
        }
        if (($ARGV[$i] =~ /^-pm/)) {
            $upmem = $ARGV[$i+1];       
        }
        if (($ARGV[$i] =~ /^-lf/) || ($ARGV[$i] =~ /^-jobfs/)) {
            $ujobfs = $ARGV[$i+1];       
        }
        if ($ARGV[$i] =~ /^-nproc/) {
            $unproc = $ARGV[$i+1];       
        }
        if ($ARGV[$i] =~/^-e/){
            $GD = "GDE";
        }
        if ($ARGV[$i] =~/^-ichk/){
            $ichk = "-ichk";
        }
        if ($ARGV[$i] =~/^-ochk/){
            $ochk = "-ochk";
        }
        if ($ARGV[$i] =~/^-cs/){
            $cs = "yes";
        }
    }
}

if (($sqtest =~ "no") && ($cs !~ "yes") && ($definerproj =~ "n")) {
    @alloctime = split(/\s+/,`ssh $machine -l \$REMOTE_USER nci_account -P $proj[0] | grep 'Overall' `);
    if ($alloctime[6]/1000 > $grant{$proj[0]}) { 
        $rproj = $proj[1];
        print "No SU available on project $proj[0] - submit to $rproj.\n";  
    }
}


if($ARGV[0] =~/inp/){
    # GAMESS INPUT
    if ($ARGV[0] =~ /uhf/){
        $vmem  = "1gb";
        $jobfs = "1gb";
        $time  = "3h";
        $nproc = "24";
    }
    elsif ($ARGV[0] =~/sad/ or $ARGV[0] =~/opt/){
        $vmem  = "5gb";
        $jobfs = "6gb";
        $time  = "3h";
        $nproc = "24";
    }
    elsif ($ARGV[0] =~/sp/){
        $vmem  = "3gb";
        $jobfs = "5gb";
        $time  = "1h";
        $nproc = "24";
    }
    else {
        $vmem  = "3gb";
        $jobfs = "5gb";
        $time  = "20h";
        $nproc = "24";
    }
    if ($GD =~/GDE/){
        $time = "1h";
        $vmem  = "3gb";
        $jobfs = "5gb";
        $nproc = "24";
    }
}

elsif ($ARGV[0] =~/ccsdt.ini/ or $ARGV[0] =~/cisdt.ini/){  
    # MOLPRO INPUT
    open INI, "$ARGV[0]", or die $!;
    while (<INI>){
        if (/geometry/){
            $natom = readline(INI);
        }
    }
    close INI;
    if ($natom <=10){
        $vmem  = "5gb";
        $nproc = "24";
        $jobfs = "10gb";
        $time  = "10";
    }
    elsif($natom <=20){
        $vmem  = "8500mb";
        $nproc = "24";
        $jobfs = "20gb";
        $time  = "20";
    }
    elsif($natom <= 40 ){
        $vmem  = "40gb";
        $nproc = "24";
        $jobfs = "100gb";
        $time  = "48";
    }
    else{
        $vmem  = "60gb";
        $nproc = "48";
        $jobfs = "200gb";
        $time  = "48";
    }
    if ($GD =~/GDE/){
#       $time = "1";
#       $vmem  = "4gb";
#       $jobfs = "2gb";
#       $nproc = "4";
    if($time >= 48){
        $time = 48;
    }
    }
    $time  = ${time}."h"; 
}

elsif ($ARGV[0] =~/\.in/){
    # Q-Chem INPUT
    if ($GD =~/GDE/){
        $time = "1h";
        $vmem  = "2gb";
        $jobfs = "2gb";
        $nproc = "1";
    }
    else{
        $vmem  = "2200mb";
        $nproc = "1";
        $jobfs = "10gb";
        $time  = "30h"; 
    }
}

elsif ($ARGV[0] =~/mtfull/){
        $vmem  = "16000mb";
        $nproc = "1";
        $jobfs = "200gb";
        $time  = "400h";
}

elsif ($ARGV[0] =~/tz.ini/ or $ARGV[0] =~/\.mt/){
        $vmem  = "4gb";
        $nproc = "4";
        $jobfs = "20gb";
        $time  = "1h";
        $ini_mem = "80";
}

elsif ($ARGV[0] =~/qz/){
        $vmem  = "16000mb";
        $nproc = "4";
        $jobfs = "400gb";
        $time  = "400h";
        $ini_mem = "2000";
}

else {
    if ($ichk !~ "chk") {
         $cominput=file2string($ARGV[0]);
        stripcom($cominput);
        $hydrogens=0;
        $heavyatoms=0;

        if ($iszmat){
            my $molecule = $ARGV[0];
            zmtCom2xyz($molecule, \@atom, \@X, \@Y, \@Z);
            for ($i = 0; $i < $natoms; $i++){
                if($atom[$i] =~ /^H$/i){
                    $hydrogens++;
                }
                else{
                    $heavyatoms++;
                }
            }
        }
        else{
            @atom1= split(/\n/,$cominput);
            for ($i = 0; $i <= $#cominput; $i++){
                @atom1[$i] =~ s/^\s+//;
                @atom[$i] = split(/\s+/,@atom1[$i]);
                if($atom[$i] =~ /^H$/i){
                    $hydrogens++;
                }
                else{
                    $heavyatoms++;
                }
            }
        }
        print "$ARGV[0]\t has $heavyatoms heavy atoms\n";
    }
    else {
        print "Input data will be taken from checkpoint file\n";
    }
#print "natoms=",$hydrogens+$heavyatoms,"\n";
#print $cominput;
    if ($ARGV[0] =~/run/){
        # ADF INPUT
        $vmem  = "1gb";
        $jobfs = "1gb";
        $time  = "1h";
        $nproc = "4";
    }

    request();

    if (!$ARGV[1]){
    }
    else{
        if ($ARGV[1] eq "dog3m"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2");
        }
        elsif ($ARGV[1] eq "dog3mdiff"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2-diff\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2-diff");
        }
        elsif ($ARGV[1] eq "dog3"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2rad\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2rad");
        }
        elsif ($ARGV[1] eq "dog3diff"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2rad-diff\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 mp2rad-diff");
        }
        elsif ($ARGV[1] eq "dog3full"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 full\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 full");
        }
        elsif ($ARGV[1] eq "dog3core"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 core\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 core");
        }
        elsif ($ARGV[1] eq "dow1"){
            print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 w1\n";
            system("usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem -lt $time -nproc $nproc -rproj $rproj -g3 w1");
        }
        else{
        }
    }
}

if ($utime =~ /\d/) { $time = $utime }
if ($umem =~ /\d/) { $vmem = $umem }
if ($upmem =~ /\d/) { $pmem = "-pm $upmem" }
if ($ujobfs =~ /\d/) { $jobfs = $ujobfs }
if ($unproc =~ /\d/) { $nproc = $unproc }
#if (($GD =~ /GDE/) && (($time =~ /\d\d/) || ($time =~ /9/))) { $time = "8h" }
#if (($GD =~ /GDE/) && (time =~ /\d\d/)) { $time = "10h" }

# print "Attempting to submit on project $rproj\n";

if (($sqtest =~ "yes") && (($m >= $maxU{$rproj}) || ($n+1 >= $maxQ{$rproj}))){
    while (!($queue = freeQ($rproj,$m,$n))){
         print color 'red';
         print "Queue on $machine is full. Waiting...\n\n";
         print color 'reset';
         sleep $sleep_queue;
     }
}

print "usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem $pmem -lt $time -nproc $nproc -rproj $rproj $ichk $ochk $ver\n";
$jobid = `usagd_updated $GD $ARGV[0] -lf $jobfs -lw $vmem $pmem -lt $time -nproc $nproc -rproj $rproj $ichk $ochk $ver`;
chomp ($jobid);
$jobid =~ s/\.r-man2//;
$jobid =~ s/\n//;
printf "Jobid: %-10s\n",$jobid;

$recfile = "$home/JOB/recordfile";
open RECORD, ">>$recfile" or die "Couldn't open file $recfile for appending\n";
printf RECORD "%-10s %-100s\n",$jobid, $ARGV[0];
close (RECORD);


######################################################################################################

sub request{
    if ($theory =~/pm6/i ){
        $vmem  = "1500mb";
        $nproc = "24";
        $jobfs = "1";
        $time  = "0.2"; 
    }
    elsif (($theory =~/lyp/i or $theory =~/bmk/i or $theory =~/M05/i or $theory =~/M06/i) and ($scanjob==1 or $ARGV[0] =~/scan/i) ){
        $vmem  = "4000mb";
        $nproc = "24";
        $jobfs = int($heavyatoms/4)*4; 
        $time  = 5*int($heavyatoms/10); 
    }
    elsif (($theory =~/lyp/i or $theory =~/bmk/i or $theory =~/M05/i or $theory =~/M06/i) and $scanjob==0 ){
        $vmem  = "10000mb";
        $nproc = "24";
        $jobfs = int($heavyatoms/4)*4; 
        $time  = int($heavyatoms); 
    }
    elsif ($theory =~/ccsd/i ){
        $vmem  = "40gb";
        $nproc = "24";
        $jobfs = "40";
        $time  = int($heavyatoms/10*5); 
    }
    elsif ($theory =~/MP2\/gen/i ){
        $vmem  = "20000mb";
        $nproc = "24";
        $jobfs = $heavyatoms*2; 
        $time  = $heavyatoms*1; 
    }
    elsif ($theory =~/6-311/i ){
        $vmem  = "20000mb";
        $nproc = "24";
        $jobfs = "50";
        $time  = int($heavyatoms*1); 
    }
    elsif ($theory =~/GTMP2LARGE/i ){
        $vmem  = "15000mb";
        $nproc = "24";
        $jobfs = $heavyatoms*2; 
        $time  = $heavyatoms*1; 
    }
    elsif ($theory =~/hf/i ){
        $vmem  = "2500mb";
        $nproc = "24";
        $jobfs = "5";
        $time  = int($heavyatoms/10*1); 
    }
    elsif ($theory =~/g3mp2b3/i ){
        $vmem  = "15000mb";
        $nproc = "24";
        $jobfs = "50";
        $time  = $heavyatoms*1; 
    }
    else{
        $vmem  = "15000mb";
        $nproc = "24";
        $jobfs = "50";
        $time  = int($heavyatoms/10*5); 
    }
    if ($heavyatoms > 20) {
        $nproc = "24";
    }
    if ($jobfs<5){
        $jobfs=5;
    }
    elsif ($jobfs > 26){
        $jobfs=26;
    }
    $jobfs = ${jobfs}."gb";
    if ($time eq "0"){
        $time = "10";
    }
    if ($time > "48"){
        $time = "48";
    }
    if (($GD =~ /GDE/) && ($time > "48")) {
        $time = "48";
    }
    $time  = ${time}."h"; 
}


################################################################################
sub file2string {
    # file2string("filename") : gets a txt file, turns it into a string.
    my ($i,$file,$temp);
    local $/;

    open(INPUTFILE, $_[0]) ||die "Can't open $_[0] for reading.\n";
    undef $/;
    $file = <INPUTFILE>;
    close(INPUTFILE)|| die "Can't close $_[0].\n";
    return $file;
}

sub getcm {
    #getcm("geometry") : gets charge/multiplicity line from "geometry" string.
    my ($geometry, @geometry, $cm);

    $geometry = $_[0];
    @geometry = split(/\n/, $geometry);
    $cm = $geometry[0];
    return $cm;
}

sub stripcom{
    #stripcom("geometry_string"), returns stripped geometry string.
    my($geometry, @file, $cm_flag, $bk, $cm_index, $i);
    my($temp2, @temp);

    $geometry = $_[0];
    @file = split(/\n/,$geometry);
    $cm_flag = 0;   # whether we've hit the (first) charge/multiplicity section or not.
    $bk = 0;        #blank line counter for zmat section
    @cominput = ();
    $cm_index = 9999999;

    for($i = 0; $i <= $#file; $i++){
        #match the charge/multiplicity section.
        if ($file[$i] =~/#/){
            $theory =${theory}.${file[$i]};
        }

        if ($file[$i] =~/^[ \t]*-*\+*[ \t]*[0-9]{1,2}[ \t]*\+*[ \t]*[0-9]{1,2}[ \t]*$/){
            $cm_flag +=1;         #means you only get the top geometry.
            if ($cm_flag == 1){
                #   push(@cominput, $file[$i]);       #put cm into array
                $cm_index = $i;                #mark where cm is
                $temp2 = $file[$i+1];              #get next line
                $temp2 =~s/^[ \t]*//;             #strip leading whitespace
                $temp2 =~s/[ \t]*$//;              #strip trailing whitespace
                @temp = split(/[ \t]+/,$temp2);        #split
                if ($temp[0] =~ /-?\b[a-z]{1,2}\b/i){        #see if zmat
                    if (@temp == 1){
                        $iszmat = 1;
                    }else{
                        if (@temp == 4) {
                            $iszmat = 0;
                        }
                        elsif (@temp == 5) {
                            $iszmat = 1;
                        }
                        else{
                            die "$temp2 : Not xyz or xmat!\n";
                        }
                    }
                }else{
                    die "$temp[0] : not an atom!!\n";
                }
            }
        }
        if ($i > $cm_index && $cm_flag == 1){    #discard useless header and footer
            if($iszmat == 0 && $file[$i] =~/^[ \t]*[a-zA-Z]{1,2}[ \t]{1,}-?\+? *\.?[0-9]{1,}\.?[0-9]*[ \t]{1,}-?\+? *\.?[0-9]{1,}\.?[0-9]*[ \t]{1,}-?\+? *\.?[0-9]{1,}\.?[0-9]*[ \t]*$/){     #if zmat and a coordinate
                push(@cominput, $file[$i]);
            }
            if($iszmat == 1){
                if($file[$i] =~ /^[ \t]*$/){
                    $bk+=1;             #count blank lines in zmat
                }
                if ($bk < 2){      # if zmat and before the end of it, then
                    push(@cominput, $file[$i]);
                }
            }
        }
    }
    $cominput = join("\n",@cominput);
    return $cominput;
}



sub check_geometry_type{
    # check_geometry_type("cominput") : checks to see if the cominput is xyz or zmat.
    my($cominput,@cominput, $i, $temp2, $temp, @temp, $iszmat);

    $cominput = $_[0];
    @cominput = split(/\n/,$cominput);
    for($i = 0; $i <= $#cominput; $i++){
        if ($cominput[$i] =~/^[ \t]*-*\+*[ \t]*[0-9]{1,2}[ \t]*\+*[ \t]*[0-9]{1,2}[ \t]*$/){
            $temp2 = $cominput[$i+1];                      #get next line
            $temp2 =~s/^[ \t]*//;                          #get rid of leading whitespace
            $temp2 =~s/[ \t]*$//;                          #get rid of trailing whitespace
            @temp = split(/[ \t]+/,$temp2);                #split
            if ($temp[0] =~ /\b[a-z]{1,2}\b/i){            #see if zmat
                if (@temp == 1){
                    $iszmat = 1;
                }else{
                    if (@temp == 4){
                        $iszmat = 0;
                    }else{
                        die "$temp2 : Not xyz or zmat!\n";
                    }
                }
            }else{
                die "$temp[0] : not an atom!!\n";
            }
        }
    }
    return $iszmat;
}






# usage: zmtCom2xyz($molecule, \@atom, \@X, \@Y, \@Z);
sub zmtCom2xyz {
    my $mol = shift;
    $atom = shift;
    my ($x,$y,$z) = @_;
    
    open COMFILE, "< $mol" or die "Couldn't open file $mol\n$!";
    
    # this takes Gaussian input file with geometry given as
    # Zmat, and converts it to the XYZ format (cartesians)
    # This is an educational script, hence many comments.
    # The script is a filter, i.e., should be used as
    #   cat name.inp | g9xinp2xyz.pl > name.xyz
    # where name.inp is the Gaussian input file and
    # name.xyz is a file with cartesian coordinates a la XMol
    # It is assumed that G9x input file has a format:
    #   % part (e.g., checkpoint specs)
    #   # keywords/links part
    #     empty line
    #   title lines
    #     empty line
    #   charge multiplicity line
    #   zmatrix lines
    #     empty line or "Variables"
    #   symbolic variables for Z-matrix (if ZMAT has symbolic parameters)
    #     empty line or "Constants"
    #   symbolic constants for Z-matriz (if all references were not resolved yet)
    #     empty line or line starting with "-"
    #
    #  Written by Jan Labanowski in July 1997 <jkl@ccl.net>

    #

    $keywords = "";
    while($line = <COMFILE>) { # read next lines of keywords (route section)
      last if ($line =~ /\s*\d\s+\d\s*/);
    }


    $natoms = 0;    #number of atoms found initialized
    while ($line = <COMFILE>) {  # read molecule description lines
      chop($line);
      $line =~ tr/a-z/A-Z/;
      $line =~ s/^\s+//;   # get rid of front and back spaces
      $line =~ s/\s+$//;
      if(($line !~ /\S/) ||
         ($line =~ /variab/i) ||
         ($line =~ /consta/i)) {  # if blank line or end of Zmat
        last;              # exit the loop
        }
      (@fields) =  split(/\s+|,/, $line);   # split line into fields
      if (($natoms == 0) && ($fields[1] !~ /0/)) {   # first atom is only an atomic symbol
        $symbol[$natoms] = $line;
        ($bf[$natoms], $af[$natoms], $tf[$natoms]) =  (1, 1, 1);
        }
      elsif ($natoms == 0) {   # first atom is only an atomic symbol
        $symbol[$natoms] = $fields[0];
        $blen[$natoms] = $fields[2];
        $angle[$natoms] = $fields[3];
        $tors[$natoms] = $fields[4];
        ($bf[$natoms], $af[$natoms], $tf[$natoms]) =  (0, 0, 0);
        if(($blen[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($blen[$natoms] =~ /[0-9]+/)) {
          $bf[$natoms] = 1;
          }
        if(($angle[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($angle[$natoms] =~ /[0-9]+/)) {
          $af[$natoms] = 1;
          }
        if(($tors[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($tors[$natoms] =~ /[0-9]+/)) {
          $tf[$natoms] = 1;
          }
        }
      else {
        # split the line into individual fields:

        # assumed most standard z-matrix form, so check number of entries
#       if((($#fields != 2) && ($natoms == 1)) &&
#          (($#fields != 4) && ($natoms == 2)) &&
#          (($#fields != 6) && ($natoms >= 3))) {
#         printf STDERR "Error in Z-Matrix for atom %d\n", $natoms+1;
#         exit(2);   # abort 
#         }

        for($i = $#fields+1; $i <8; $i++) {  # fill up with empty strings
          $fields[$i] = "";
          }

        # parse fields  symbol_i  j  d_ij   k   theta_ijk  l  phi_ijkl 
        ($symbol[$natoms],  # atom symbol
         $bondat[$natoms],  # bonded atom
         $blen[$natoms],    # bond length
         $angat[$natoms],   # atom in an angle
         $angle[$natoms],   # angle
         $torat[$natoms],   # last atom in torsion angle
         $tors[$natoms])    # torsion angle
                              = (@fields);
        # initialize flags for required parameters to "NotFound" status (i.e., 0)
        if($natoms == 1) {
          ($bf[$natoms], $af[$natoms], $tf[$natoms]) =  (0, 1, 1);
          }
        elsif($natoms == 2) {
          ($bf[$natoms], $af[$natoms], $tf[$natoms]) =  (0, 0, 1);
          }
        else {
          ($bf[$natoms], $af[$natoms], $tf[$natoms]) =  (0, 0, 0);
          }
        
        # check if parameters are given as numbers (i.e., sign, possibly followed
        # by digits, possibly followed by period, possibly followed by digits
        # and containing at least one digit total. Set flag if number.
        if(($blen[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($blen[$natoms] =~ /[0-9]+/)) {
          $bf[$natoms] = 1;
          }
        if(($angle[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($angle[$natoms] =~ /[0-9]+/)) {
          $af[$natoms] = 1;
          }
        if(($tors[$natoms] =~ /^[-+]?[0-9]*\.?[0-9]*$/) &&
           ($tors[$natoms] =~ /[0-9]+/)) {
          $tf[$natoms] = 1;
          }

        # Atom numbers must be all digits
        if(($bondat[$natoms] !~ /^[0-9]+$/) ||
           (($angat[$natoms] !~ /^[0-9]+$/) && ($natoms > 1)) ||
           (($torat[$natoms] !~ /^[0-9]+$/) && ($natoms > 2))) {
          printf STDERR "Error in atom definition for %d\n", $i+1;
          exit(2); 
          }
        }
      $natoms++;
      }

    # check any symbolic parameters are given in the Z-mat
    $parms_given = 0;
    for($i = 0; $i < $natoms; $i++) {
      if(($bf[$i] == 0) || 
         ($af[$i] == 0) || 
         ($tf[$i] == 0)) {
        $parms_given = 1;     # symbolic parameters present
        last;
        }
      }

    if($parms_given == 1) { # read in symbolic parameters (variables) when present
      while($line = <COMFILE>) {
        $line =~ s/^\s+//;        # trailing blanks out!
        $line =~ s/\s+$//;
        $line =~ tr/a-z/A-Z/;    # convert to uppercase
        if(($line !~ /\S/) ||
           ($line =~ /const/i)) {  # if blank line or end of Variables
          last;              # exit the loop
          }

        ($name, $value) = @fields = split(/[ =,]+/, $line);  # retrieve fields
        if($#fields != 1) {
            if($fields[2]=~ /s/i ){
                $scanjob=1;
            }
       }
       if(($value !~ /^[-+]?[0-9]*\.?[0-9]*$/) ||
           ($value !~ /[0-9]+/)) {
           die "Wrong number format of Variables assignment line\n";
       }


        # substitute parameter in Z-Matrix. The symbolic parameter name is
        # allowed to be preceded with a sign, so take this into account
        $parameter_found = 0;
        for($i = 0; $i < $natoms; $i++) {
          if($bf[$i] == 0) {
            if($blen[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $blen[$i] = $sign * $value;
              $parameter_found = 1;
              $bf[$i] = 1;
              }
            }

          if($af[$i] == 0) {
            if($angle[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $angle[$i] = $sign * $value;
              $parameter_found = 1;
              $af[$i] = 1;
              }
            }

          if($tf[$i] == 0) {
            if($tors[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $tors[$i] = $sign * $value;
              $parameter_found = 1;
              $tf[$i] = 1;
              }
            }
          }
        # parameter, if given, must appear at least once in Z-Matrix
        if($parameter_found == 0) {
          die "Parameter $name = $value does not appear in Z-Matrix\n";
          }

        }
      }

    # check if all symbolic paramemters were reslolved
    $parms_given = 0;
    for($i = 0; $i < $natoms; $i++) {
      if(($bf[$i] == 0) || 
         ($af[$i] == 0) || 
         ($tf[$i] == 0)) {
        $parms_given = 1;    # symbolic parameters present
        last;
        }
      }
    # if all parameters are not resloved, read in the Constants section
    if($parms_given == 1) { # read in symbolic parameters (variables) when present
      while($line = <COMFILE>) {
        $line =~ s/^\s//;        # trailing blanks out!
        $line =~ s/\s$//;
        $line =~ tr/a-z/A-Z/;    # convert to uppercase
        if($line =~ /const/i) {
          next;
          }
        if(($line !~ /\S/) ||
           ($line =~ /^\s*\-/)) {  # if blank line or - at the front
          last;              # exit the loop
          }
        ($name, $value) = @fields = split(/[ =,]+/, $line);  # retrieve fields
#           print "#fields is $#fields\n";
#       if($#fields != 1) {
#           print "fields0 is $fields[0]\n";
#           print "fields1 is $fields[1]\n";
#         die "Wrong format of Constants assignment line\n";
#         }
        if(($value !~ /^[-+]?[0-9]*\.?[0-9]*$/) ||
           ($value !~ /[0-9]+/)) {
          die "Wrong number format on Constants assignment line\n";
          }

        # substitute parameter in Z-Matrix. The symbolic parameter name is
        # allowed to be preceded with a sign, so take this into account
        $parameter_found = 0;
        for($i = 0; $i < $natoms; $i++) {
          if($bf[$i] == 0) {
            if($blen[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $blen[$i] = $sign * $value;
              $parameter_found = 1;
              $bf[$i] = 1;
              }
            }

          if($af[$i] == 0) {
            if($angle[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $angle[$i] = $sign * $value;
              $parameter_found = 1;
              $af[$i] = 1;
              }
            }

          if($tf[$i] == 0) {
            if($tors[$i] =~ /^([-+]?)$name$/) {
              $sign = $1 . "1.0";
              $tors[$i] = $sign * $value;
              $parameter_found = 1;
              $tf[$i] = 1;
              }
            }
          }

        # parameter, if given, must appear at least once in Z-Matrix
        if($parameter_found == 0) {
          die "Parameter $name = $value does not appear in Z-Matrix\n";
          }
        }
      }

    # check if all symbolic paramemters were reslolved
    $parms_given = 0;
    for($i = 0; $i < $natoms; $i++) {
      if(($bf[$i] == 0) || 
         ($af[$i] == 0) || 
         ($tf[$i] == 0)) {
        $parms_given = 1;    # symbolic parameters present
        last;
        }
      }
    if($parms_given == 1) {
      print STDERR
      "The follwing symbolic parameters are not resolved in Z-matrix:\n";
      for($i = 0; $i < $natoms; $i++) {
        if($bf[$i] == 0) {
          printf STDERR "   %s for bond length for atom %d\n", $blen[$i], $i;
          }
        if($af[$i] == 0) {
          printf STDERR "   %s for angle value for atom %d\n", $angle[$i], $i;
          }
        if($tf[$i] == 0) {
          printf STDERR "   %s for torsion for atom %d\n", $tors[$i], $i;
          }
        }
      exit(2);
      }


    # output cartesian coordinates in XYZ XMol format
    for ($i = 0; $i < $natoms; $i++) {
        oneatom($i+1, $bondat[$i], $blen[$i], $angat[$i], $angle[$i],
              $torat[$i], $tors[$i]);

        $$atom[$i] = $symbol[$i];
        $$z[$i] = $Zcoor[$i+1];
        $$x[$i] = $Xcoor[$i+1];
        $$y[$i] = $Ycoor[$i+1];

        #printf STDOUT "%-3s  %12.6f  %12.6f  %12.6f\n",$$atom[$i],$$z[$i],$$x[$i],$$y[$i];

    }

    close COMFILE;

}

# -- Takes Z-mat line, i.e., 
#        atomnumber, ibond, bondlen, iangle, bondangle, itors, torsangle
#    and updates NONLOCAL arrays Xcoor, Ycoor, Zcoor which hold cartesian
#    coordinates. It is assumed that atom numbering starts from 1
#    (not from 0 as usually in C and perl)
#    USES nonlocal array Xcoor, Ycoor, Zcoor where it stores coordinates
#    It is assumed that angles are given in DEGREEs and bondlen in the same
#    units in which cartesian coordinates will be given.
#                  
#             ibond -- iangle
#              /             \ 
#          atnum             itors
#
#  CAUTIONS -- contrary to the UNIX/PERL/C tradition, the
#  arrays XYZ start from subscript 1 (not 0), and XYZ[0] are left unused,
#  in other words, array element numbers correspond to atom numbers.

sub oneatom {
  # variables are declared local, so they do not interfere with
  # variables outside this subroutine
  local ($atnum,
         $ibond, $bondlen,
         $iangle, $bondangle,
         $itors, $torsangle);
  local ($deg2r);
  local ($rinv, $aux);
  local ($xa, $ya, $za);
  local ($xb, $yb, $zb);
  local ($xc, $yc, $zc);
  local ($xx, $yy, $zz);

  $atnum = $_[0];

  if($atnum == 2) {
    ($atnum, $ibond, $bondlen) = @_;
    }
  elsif ($atnum == 3) {
    ($atnum, $ibond, $bondlen, $iangle, $bondangle) = @_;
    }
  elsif ($atnum > 3) {
    ($atnum, $ibond, $bondlen, $iangle, $bondangle, $itors, $torsangle) = @_;
    }

  $deg2r = atan2(1.0, 1.0)*4.0/180.0;

  # first atom in the origin of coordinate system      
  if($atnum == 1) {
    $Xcoor[1] = 0.0;
    $Ycoor[1] = 0.0;
    $Zcoor[1] = 0.0;
    return;
    }

  # second atom on Z-axis, bondlen from the first atom
  if($atnum == 2) {
    $Xcoor[2] = 0.0;
    $Ycoor[2] = 0.0;
    $Zcoor[2] = $bondlen;
    return;
    }

  # bonded atom coordinates
  $x0 = $Xcoor[$ibond];
  $y0 = $Ycoor[$ibond];
  $z0 = $Zcoor[$ibond];

  if($atnum == 3) {    # third atom placed on the Oxz plane
    $Xcoor[3] = $x0+$bondlen*sin($bondangle*$deg2r);
    $Ycoor[3] = 0.0;
    $aux = $bondlen*cos($bondangle*$deg2r);
    if($ibond == 1) {
      $Zcoor[3] = $z0+$aux;
      }
    elsif ($ibond == 2) {
      $Zcoor[3] = $z0-$aux;
      }
    return;
    }


  # vector from j-->k
  $xx = $Xcoor[$iangle] - $Xcoor[$ibond];
  $yy = $Ycoor[$iangle] - $Ycoor[$ibond];
  $zz = $Zcoor[$iangle] - $Zcoor[$ibond];

  # inverted vector length
  $rinv = 1.0/sqrt($xx*$xx + $yy*$yy + $zz*$zz);

  # unit vector ibond--->iangle
  $xa = $xx*$rinv;
  $ya = $yy*$rinv;
  $za = $zz*$rinv;

  # vector from ibond--->itors  
  $xb = $Xcoor[$itors] - $Xcoor[$ibond];
  $yb = $Ycoor[$itors] - $Ycoor[$ibond];
  $zb = $Zcoor[$itors] - $Zcoor[$ibond];

# unit vector ibond--->itors
  $xc = $ya*$zb - $za*$yb;
  $yc = $za*$xb - $xa*$zb;
  $zc = $xa*$yb - $ya*$xb;

  $rinv = 1.0/sqrt($xc*$xc + $yc*$yc + $zc*$zc);

  $xc = $xc*$rinv;
  $yc = $yc*$rinv;
  $zc = $zc*$rinv;

  $xb = $yc*$za - $zc*$ya;
  $yb = $zc*$xa - $xc*$za;
  $zb = $xc*$ya - $yc*$xa;

  $zz = $bondlen*cos($bondangle*$deg2r);
  $xx = $bondlen*sin($bondangle*$deg2r)*cos($torsangle*$deg2r);
  $yy = $bondlen*sin($bondangle*$deg2r)*sin($torsangle*$deg2r);

  $Xcoor[$atnum] = $x0 + $xa*$zz + $xb*$xx + $xc*$yy;
  $Ycoor[$atnum] = $y0 + $ya*$zz + $yb*$xx + $yc*$yy;
  $Zcoor[$atnum] = $z0 + $za*$zz + $zb*$xx + $zc*$yy;

  return;
  }



############################################################################
#                                  freeQ                                   #
############################################################################    

sub freeQ($rproj,$m,$n){
    @totalQ = split(/\s+/,`ssh $machine -l \$REMOTE_USER /opt/pbs/default/bin/nqstat -P $rproj | grep ' $ruser ' | grep ' $rproj ' | wc `);
    @Queuejob = `ssh $machine -l \$REMOTE_USER /opt/pbs/default/bin/nqstat -P $rproj | grep ' $rproj ' | sed 's/.*MB//' | sed 's/.*GB//'`;
    $m = $totalQ[1];
    $n = $#Queuejob;
    if ($totalQ[1] >= $maxU{$rproj}){
        print "Total queued jobs for $ruser on $rproj = $m (limit $maxU{$rproj} per user).\n";
    }
    else{
        print "Total queued jobs for project $rproj is $n (limit $maxQ{$rproj}).\n\n";
        if($#Queuejob+1 >= $maxQ{$rproj}){
            print "Total queued jobs = $n is greater than $maxQ{$rproj} per project.\n";
        }
        else{
            return $rproj;
        }
    }

    return 0;
}


__END__
